package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.beans.EvenementBean;
import com.example.demo.beans.OutilBean;
import com.example.demo.beans.PublicationBean;
import com.example.demo.dao.EnseignantChercheurRepository;
import com.example.demo.dao.EtudiantRepository;
import com.example.demo.dao.MemberPubRepository;
import com.example.demo.dao.MemberRepository;
import com.example.demo.dao.MembreEvtRepository;
import com.example.demo.dao.MembreOutRepository;
import com.example.demo.entities.EnseignantChercheur;
import com.example.demo.entities.Etudiant;
import com.example.demo.entities.Evenement_Membre;
import com.example.demo.entities.Member;
import com.example.demo.entities.Member_Pub_Ids;
import com.example.demo.entities.Membre_Evt_Ids;
import com.example.demo.entities.Membre_Out_Ids;
import com.example.demo.entities.Outil_Membre;
import com.example.demo.entities.Publication_Member;
import com.example.demo.proxies.EvenementProxyService;
import com.example.demo.proxies.OutilProxyService;
import com.example.demo.proxies.PublicationProxyService;

@Service
public class MemberImpl implements IMemberService {
	@Autowired
	MemberRepository memberRepository;
	@Autowired
	EtudiantRepository etudiantRepository;
	@Autowired
	EnseignantChercheurRepository enseignantChercheurRepository;

	@Autowired
	MemberPubRepository memberPubRepository;

	@Autowired
	MembreOutRepository membreoutrepository;

	@Autowired
	MembreEvtRepository membreevtrepository;

	@Autowired
	PublicationProxyService proxy;

	@Autowired
	OutilProxyService proxyo;

	@Autowired
	EvenementProxyService proxye;

	public Member addMember(Member m) {
		memberRepository.save(m);
		return m;
	}

	public void deleteMember(Long id) {
		memberRepository.deleteById(id);
	}

	public Member updateMember(Member m) {
		return memberRepository.saveAndFlush(m);
	}

	public Member updateMemberid(Long id, Member p) {
		return memberRepository.save(p);
	}

	public void saveMember(Member p) {

		memberRepository.save(p);

	}

	public Member findMember(Long id) {
		Member m = (Member) memberRepository.findById(id).get();
		return m;
	}

	public List<Member> findAll() {
		return memberRepository.findAll();
	}

	public Member findByCin(String cin) {
		return memberRepository.findByCin(cin);
	}

	public Member findByEmail(String email) {
		return memberRepository.findByEmail(email);
	}

	public List<Member> findByNom(String nom) {
		return memberRepository.findByNomStartingWith(nom);
	}
	
	public List<Member> findByTypeMbre(String type_mbre) {
		return memberRepository.findByTypeMbre(type_mbre);
	}

	public List<Etudiant> findByDiplome(String diplome) {
		return etudiantRepository.findByDiplome(diplome);
	}

	public List<EnseignantChercheur> findByGrade(String grade) {
		return enseignantChercheurRepository.findByGrade(grade);
	}

	public List<EnseignantChercheur> findByEtablissement(String etablissement) {
		return enseignantChercheurRepository.findByEtablissement(etablissement);
	}

	public void affectStudToEns(long id_std, long id_ens) {
		EnseignantChercheur en = enseignantChercheurRepository.findById(id_ens).get();
		Etudiant et = etudiantRepository.findById(id_std).get();
		et.setEncadrants(en.getNom());
		memberRepository.save(et);
		// enseignantChercheurRepository.findById(id_ens);
	}

	public void affecterauteurTopublication(Long idpub, Long idauteur) {
		Member mbr = memberRepository.findById(idauteur).get();
		Publication_Member mbs = new Publication_Member();
		mbs.setAuteur(mbr);
		mbs.setId(new Member_Pub_Ids(idpub, idauteur));
		memberPubRepository.save(mbs);
	}

	public List<PublicationBean> findPublicationparauteur(Long idauteur) {
		List<PublicationBean> pubs = new ArrayList<PublicationBean>();
		List<Publication_Member> idpubs = memberPubRepository.findpubId(idauteur);
		idpubs.forEach(s -> {
			System.out.println(s);
			pubs.add(proxy.findPublicationById(s.getId().getPublication_id()));
		});

		return pubs;
	}

	public List<Etudiant> findAllEtd(){
		return etudiantRepository.findAll();}
	public List<EnseignantChercheur> findAllEnsCh(){
		return enseignantChercheurRepository.findAll();
		}

	public void affecterdevelopperTooutil(Long iddeveloppeur, Long idout) {
		Member mbr = memberRepository.findById(iddeveloppeur).get();
		Outil_Membre mbs = new Outil_Membre();
		mbs.setDeveloppeur(mbr);
		mbs.setId(new Membre_Out_Ids(idout, iddeveloppeur));
		membreoutrepository.save(mbs);
	};

	public List<OutilBean> findoutilpardeveloppeur(Long iddeveloppeur) {

		List<OutilBean> outs = new ArrayList<OutilBean>();
		List<Outil_Membre> idouts = membreoutrepository.findoutId(iddeveloppeur);
		idouts.forEach(s -> {
			System.out.println(s);
			outs.add(proxyo.recupererUnOutil(s.getId().getOutil_id()));
		});

		return outs;

	};

	public void affecterparticipantToevenement(Long idparticipant, Long idevt) {
		Member mbr = memberRepository.findById(idparticipant).get();
		Evenement_Membre mbs = new Evenement_Membre();
		mbs.setParticipant(mbr);
		mbs.setId(new Membre_Evt_Ids(idevt, idparticipant));
		membreevtrepository.save(mbs);
	};

	public List<EvenementBean> findevenementparparticipant(Long idparticipant) {

		List<EvenementBean> evts = new ArrayList<EvenementBean>();
		List<Evenement_Membre> idevts = membreevtrepository.findevtId(idparticipant);
		idevts.forEach(s -> {
			System.out.println(s);
			evts.add(proxye.recupererUnEvenement(s.getId().getEvenement_id()));
		});

		return evts;

	};

}